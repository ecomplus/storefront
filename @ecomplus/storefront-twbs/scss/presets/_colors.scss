// Parse color shift weight by range

$color-shift-weights: () !default;
$color-shift-weights: map-merge(
  (
    -75:  "whiter",
    -50:  "white",
    -33:  "lightest",
    -21:  "lighter",
    -10:  "light",
    -7:   "lighten",
    0:    "",
    8:    "darken",
    10:   "dark",
    13:   "darker",
    16:   "darkest",
    50:   "black"
  ),
  $color-shift-weights
);

@function label-color-weight($min-shift-weight) {
  @each $shift-weight, $label in $color-shift-weights {
    @if $shift-weight >= $min-shift-weight {
      @return $label;
    }
  }
  @return $min-shift-weight;
}

// scss-docs-start color-functions
// Tint a color: mix a color with white
@function tint-color($color, $weight) {
  @if $weight < 0 {
    @return shade-color($color, -$weight);
  }
  @if type-of($color) == color {
    @return mix(white, $color, $weight);
  } @else {
    @return str-insert($color, -#{label-color-weight(-$weight)}, -2);
  }
}

// Shade a color: mix a color with black
@function shade-color($color, $weight) {
  @if $weight < 0 {
    @return tint-color($color, -$weight);
  }
  @if type-of($color) == color{
    @return mix(black, $color, $weight);
  } @else {
    @return str-insert($color, -#{label-color-weight(-$weight)}, -2);
  }
  
}

// Shade the color if the weight is positive, else tint it
@function shift-color($color, $weight) {
  @return if($weight > 0, shade-color($color, $weight), tint-color($color, -$weight));
}
// scss-docs-end color-functions

// Lighten a color or get light CSS var
@function lighten-color($color, $weight) {
  @if type-of($color) == color {
    @return lighten($color, $weight);
  } @else {
    @return str-insert($color, -#{label-color-weight(-$weight)}, -2);
  }
}

// Darken a color or get dark CSS var
@function darken-color($color, $weight) {
  @if $weight < 0 {
    @return lighten-color($color, -$weight);
  }
  @if type-of($color) == color {
    @return darken($color, $weight);
  } @else {
    @return str-insert($color, -#{label-color-weight($weight)}, -2);
  }
}

// RGB color opacity with alpha
@function rgba-color($color, $alpha) {
  @if type-of($color) == color {
    @return rgba($color, $alpha);
  } @else {
    @return rgba(#{str-insert($color, -rgb, -2)}, #{$alpha});
  }
}

// Color contrast
// See https://github.com/twbs/bootstrap/pull/30168

// A list of pre-calculated numbers of pow(divide((divide($value, 255) + .055), 1.055), 2.4). (from 0 to 255)
// stylelint-disable-next-line scss/dollar-variable-default, scss/dollar-variable-pattern
$_luminance-list: .0008 .001 .0011 .0013 .0015 .0017 .002 .0022 .0025 .0027 .003 .0033 .0037 .004 .0044 .0048 .0052 .0056 .006 .0065 .007 .0075 .008 .0086 .0091 .0097 .0103 .011 .0116 .0123 .013 .0137 .0144 .0152 .016 .0168 .0176 .0185 .0194 .0203 .0212 .0222 .0232 .0242 .0252 .0262 .0273 .0284 .0296 .0307 .0319 .0331 .0343 .0356 .0369 .0382 .0395 .0409 .0423 .0437 .0452 .0467 .0482 .0497 .0513 .0529 .0545 .0561 .0578 .0595 .0612 .063 .0648 .0666 .0685 .0704 .0723 .0742 .0762 .0782 .0802 .0823 .0844 .0865 .0887 .0908 .0931 .0953 .0976 .0999 .1022 .1046 .107 .1095 .1119 .1144 .117 .1195 .1221 .1248 .1274 .1301 .1329 .1356 .1384 .1413 .1441 .147 .15 .1529 .1559 .159 .162 .1651 .1683 .1714 .1746 .1779 .1812 .1845 .1878 .1912 .1946 .1981 .2016 .2051 .2086 .2122 .2159 .2195 .2232 .227 .2307 .2346 .2384 .2423 .2462 .2502 .2542 .2582 .2623 .2664 .2705 .2747 .2789 .2831 .2874 .2918 .2961 .3005 .305 .3095 .314 .3185 .3231 .3278 .3325 .3372 .3419 .3467 .3515 .3564 .3613 .3663 .3712 .3763 .3813 .3864 .3916 .3968 .402 .4072 .4125 .4179 .4233 .4287 .4342 .4397 .4452 .4508 .4564 .4621 .4678 .4735 .4793 .4851 .491 .4969 .5029 .5089 .5149 .521 .5271 .5333 .5395 .5457 .552 .5583 .5647 .5711 .5776 .5841 .5906 .5972 .6038 .6105 .6172 .624 .6308 .6376 .6445 .6514 .6584 .6654 .6724 .6795 .6867 .6939 .7011 .7084 .7157 .7231 .7305 .7379 .7454 .7529 .7605 .7682 .7758 .7835 .7913 .7991 .807 .8148 .8228 .8308 .8388 .8469 .855 .8632 .8714 .8796 .8879 .8963 .9047 .9131 .9216 .9301 .9387 .9473 .956 .9647 .9734 .9823 .9911 1;

@function color-contrast($background, $color-contrast-dark: $color-contrast-dark, $color-contrast-light: $color-contrast-light, $min-contrast-ratio: $min-contrast-ratio) {
  $foregrounds: $color-contrast-light, $color-contrast-dark, $white, $black;
  $max-ratio: 0;
  $max-ratio-color: null;

  @each $color in $foregrounds {
    $contrast-ratio: contrast-ratio($background, $color);
    @if (type-of($background) == color) {
      @if $contrast-ratio > $min-contrast-ratio {
        @return $color;
      } @else if $contrast-ratio > $max-ratio {
        $max-ratio: $contrast-ratio;
        $max-ratio-color: $color;
      }
    }
    @else {
      @return str-insert($color, $contrast-ratio, -2);
    }
    
  }

  @warn "Found no color leading to #{$min-contrast-ratio}:1 contrast ratio against #{$background}...";

  @return $max-ratio-color;
}

@function contrast-ratio($background, $foreground: $color-contrast-light) {
  $l1: luminance($background);
  $l2: luminance(opaque($background, $foreground));

  @return if($l1 > $l2, divide($l1 + .05, $l2 + .05), divide($l2 + .05, $l1 + .05));
}

// Request a theme color level with mix

@function mix-color($color-base, $color, $weight: 50) {
  @if type-of($color-base) == color {
    @if type-of($color) == color {
      @return mix($color-base, $color, $weight);
    }
  }
  @if $color-base == $white or $color-base == $white {
    @return lighten-color($color, calc($weight / 2));
  } @else {
    @return darken-color($color, calc($weight / 2));
  }
}

@function theme-color-level($color-name: "primary", $level: 0) {
  $color: theme-color($color-name);
  $color-base: if($level > 0, $black, $white);
  @return mix-color($color-base, $color, abs($level * $theme-color-interval));
}

// Color system

// scss-docs-start gray-color-variables
$white:    #fff !default;
$gray-100: #f8f9fa !default;
$gray-200: #e9ecef !default;
$gray-300: #dee2e6 !default;
$gray-400: #ced4da !default;
$gray-500: #adb5bd !default;
$gray-600: #6c757d !default;
$gray-700: #495057 !default;
$gray-800: #343a40 !default;
$gray-900: #212529 !default;
$black:    #000 !default;
// scss-docs-end gray-color-variables

// fusv-disable
// scss-docs-start gray-colors-map
$grays: (
  "100": $gray-100,
  "200": $gray-200,
  "300": $gray-300,
  "400": $gray-400,
  "500": $gray-500,
  "600": $gray-600,
  "700": $gray-700,
  "800": $gray-800,
  "900": $gray-900
) !default;
// scss-docs-end gray-colors-map
// fusv-enable

// scss-docs-start color-variables
$blue:    #0d6efd !default;
$indigo:  #6610f2 !default;
$purple:  #6f42c1 !default;
$pink:    #d63384 !default;
$red:     #dc3545 !default;
$orange:  #fd7e14 !default;
$yellow:  #ffc107 !default;
$green:   #198754 !default;
$teal:    #20c997 !default;
$cyan:    #0dcaf0 !default;
// scss-docs-end color-variables

// scss-docs-start colors-map
$colors: (
  "blue":       $blue,
  "indigo":     $indigo,
  "purple":     $purple,
  "pink":       $pink,
  "red":        $red,
  "orange":     $orange,
  "yellow":     $yellow,
  "green":      $green,
  "teal":       $teal,
  "cyan":       $cyan,
  "white":      $white,
  "gray":       $gray-600,
  "gray-dark":  $gray-800
) !default;
// scss-docs-end colors-map

// scss-docs-start theme-color-variables
$primary:       $blue !default;
$secondary:     $gray-600 !default;
$success:       $green !default;
$info:          $cyan !default;
$warning:       $yellow !default;
$danger:        $red !default;
$light:         $gray-100 !default;
$dark:          $gray-900 !default;
// scss-docs-end theme-color-variables

// scss-docs-start theme-colors-map
$theme-colors: (
  "primary":    $primary,
  "secondary":  $secondary,
  "success":    $success,
  "info":       $info,
  "warning":    $warning,
  "danger":     $danger,
  "light":      $light,
  "dark":       $dark
) !default;
// scss-docs-end theme-colors-map

// The contrast ratio to reach against white, to determine if color changes from "light" to "dark". Acceptable values for WCAG 2.0 are 3, 4.5 and 7.
// See https://www.w3.org/TR/WCAG20/#visual-audio-contrast-contrast
$min-contrast-ratio:   4.5 !default;

// Customize the light and dark text colors for use in our color contrast function.
$color-contrast-dark:      $black !default;
$color-contrast-light:     $white !default;

// Smaller color maps for less used components

$alert-colors: () !default;
$alert-colors: map-merge(
  (
    "success":    $success,
    "info":       $info,
    "warning":    $warning,
    "danger":     $danger
  ),
  $alert-colors
);

$badge-colors: () !default;
$badge-colors: map-merge(
  (
    "primary":    var(--primary),
    "secondary":  var(--secondary),
    "success":    $success,
    "info":       $info,
    "warning":    $warning,
    "dark":       $dark
  ),
  $badge-colors
);

$btn-colors: () !default;
$btn-colors: map-merge(
  (
    "primary":    var(--primary),
    "secondary":  var(--secondary),
    "success":    $success,
    "danger":     $danger,
    "light":      $light,
    "dark":       $dark
  ),
  $btn-colors
);

$btn-outline-colors: () !default;
$btn-outline-colors: map-merge(
  (
    "primary":    var(--primary),
    "secondary":  var(--secondary),
    "success":    $success,
    "danger":     $danger
  ),
  $btn-outline-colors
);
